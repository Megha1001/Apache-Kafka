Kafka Use Cases
-----------------
- Messaging System
- Activity Tracking
- Gather metrics from differnt locations
- Application logs gathering
- Stream processing(with kafka Stream API for example)

Kafka Topics
-----------------

- A particular stream of data
- Like a table in a database(without all the contraints)
- You can have as many topics as you want
- A topic is identified by its name
- Supports any type of message format(JSON, AVRO, TXT etc)
- The sequence of messages is called a data stream.
- You cannot query topics, instead , use kafka producers to send data and kafka consumers to read the data


Partitions and offsets
------------------------

- Topics are split in partitions(example, 100 partitions)
- Messages send to topics are endup in these partitions
    - Messages within each partition are ordered
    - Each message within a partition gets an incremental id, called offset
- kafka topics are immutable : once data is written to a partition , it cannot be changed

- Once the data is written to a partition, it cannot be changed(immutability)
- Data is kept only for a limited time(configurable)
- Offset only have a meaning for a specific partition
    - E.g. offset 3 in partition 0 doesn't represent the same data as offset 3 in partition 1
    - Offset are not re-used even if previous message have been deleted
- Order is guaranteed only within a partition(not across partitions)
- data is assigned randomly to a partition unless a key is provided
- You can have as many partitions per topic as you want.




PRODUCERS
-----------------

- Producers write data to topics(which are made of partitions)
- Producers know to which partition to write to( and which kafka broker has it)
- In case of kafka broker failures, Producers will automatically recover.
    - The load is balanced to many brokers thanks to the number of partitions


Producers : Message keys
- Producers can choose to send a key with the message(Optional) [string, number, binary]
- if key=null, data is sent round robin(partition 0, then 1, then 2)
- If key!=null, then all messages for that key will always go to the same partition(hashing)
- A key are typically sent if you need messages ordering for a specific field(ex : truck_id)